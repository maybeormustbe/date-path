#!/usr/bin/env node

const admin = require('firebase-admin');
const fs = require('fs').promises;
const path = require('path');

// Configuration Firebase
let serviceAccount;
try {
  serviceAccount = require('./firebase-service-account.json');
} catch (error) {
  console.error('‚ùå Fichier firebase-service-account.json non trouv√©!');
  console.log('üìã Suivez ces √©tapes:');
  console.log('1. Allez dans la console Firebase');
  console.log('2. Projet Settings > Service accounts');
  console.log('3. G√©n√©rez une nouvelle cl√© priv√©e');
  console.log('4. T√©l√©chargez le fichier JSON dans scripts/firebase-service-account.json');
  process.exit(1);
}

// Initialisez Firebase Admin
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

async function importCollection(collectionName, data, mapping = {}) {
  try {
    console.log(`üìä Import de ${collectionName}...`);
    
    const batch = db.batch();
    let count = 0;
    
    for (const item of data) {
      // Mapper les champs si n√©cessaire
      const mappedItem = { ...item };
      Object.keys(mapping).forEach(oldKey => {
        if (mappedItem[oldKey] !== undefined) {
          mappedItem[mapping[oldKey]] = mappedItem[oldKey];
          delete mappedItem[oldKey];
        }
      });
      
      // Convertir les timestamps
      if (mappedItem.created_at) {
        mappedItem.createdAt = admin.firestore.Timestamp.fromDate(new Date(mappedItem.created_at));
        delete mappedItem.created_at;
      }
      if (mappedItem.updated_at) {
        mappedItem.updatedAt = admin.firestore.Timestamp.fromDate(new Date(mappedItem.updated_at));
        delete mappedItem.updated_at;
      }
      if (mappedItem.taken_at && mappedItem.taken_at !== null) {
        mappedItem.takenAt = admin.firestore.Timestamp.fromDate(new Date(mappedItem.taken_at));
        delete mappedItem.taken_at;
      }
      
      // Mapper les IDs sp√©cifiques
      if (mappedItem.album_id) {
        mappedItem.albumId = mappedItem.album_id;
        delete mappedItem.album_id;
      }
      if (mappedItem.user_id) {
        mappedItem.userId = mappedItem.user_id;
        delete mappedItem.user_id;
      }
      if (mappedItem.cover_photo_id) {
        mappedItem.coverPhotoId = mappedItem.cover_photo_id;
        delete mappedItem.cover_photo_id;
      }
      if (mappedItem.file_path) {
        mappedItem.filePath = mappedItem.file_path;
        delete mappedItem.file_path;
      }
      if (mappedItem.file_size) {
        mappedItem.fileSize = mappedItem.file_size;
        delete mappedItem.file_size;
      }
      if (mappedItem.mime_type) {
        mappedItem.mimeType = mappedItem.mime_type;
        delete mappedItem.mime_type;
      }
      if (mappedItem.thumbnail_path) {
        mappedItem.thumbnailPath = mappedItem.thumbnail_path;
        delete mappedItem.thumbnail_path;
      }
      if (mappedItem.location_name) {
        mappedItem.locationName = mappedItem.location_name;
        delete mappedItem.location_name;
      }
      if (mappedItem.is_favorite !== undefined) {
        mappedItem.isFavorite = mappedItem.is_favorite;
        delete mappedItem.is_favorite;
      }
      
      const docRef = db.collection(collectionName).doc(mappedItem.id);
      batch.set(docRef, mappedItem);
      count++;
      
      // Commit par batch de 500 (limite Firestore)
      if (count % 500 === 0) {
        await batch.commit();
        console.log(`  ‚úÖ ${count} documents import√©s...`);
      }
    }
    
    // Commit le reste
    if (count % 500 !== 0) {
      await batch.commit();
    }
    
    console.log(`‚úÖ ${collectionName}: ${count} documents import√©s avec succ√®s`);
    return count;
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'import de ${collectionName}:`, error);
    throw error;
  }
}

async function createFirestoreRules() {
  const rules = `rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Albums: seuls les propri√©taires peuvent voir/modifier leurs albums
    match /albums/{albumId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Day entries: seuls les propri√©taires peuvent voir/modifier leurs entr√©es
    match /dayEntries/{dayId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Photos: seuls les propri√©taires peuvent voir/modifier leurs photos
    match /photos/{photoId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Profiles: les utilisateurs peuvent cr√©er/modifier leur propre profil
    match /profiles/{userId} {
      allow read, write: if request.auth != null && userId == request.auth.uid;
    }
  }
}`;

  const rulesPath = path.join(__dirname, 'firestore.rules');
  await fs.writeFile(rulesPath, rules);
  
  console.log('üìÑ R√®gles Firestore g√©n√©r√©es dans firestore.rules');
  console.log('üìã Pour d√©ployer les r√®gles:');
  console.log('   firebase deploy --only firestore:rules');
}

async function createStorageRules() {
  const rules = `rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Photos: seuls les propri√©taires peuvent voir/modifier leurs fichiers
    match /photos/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Thumbnails: seuls les propri√©taires peuvent voir/modifier leurs miniatures
    match /thumbnails/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}`;

  const rulesPath = path.join(__dirname, 'storage.rules');
  await fs.writeFile(rulesPath, rules);
  
  console.log('üìÑ R√®gles Storage g√©n√©r√©es dans storage.rules');
  console.log('üìã Pour d√©ployer les r√®gles:');
  console.log('   firebase deploy --only storage');
}

async function generateMigrationSummary(exportDir, albumsCount, dayEntriesCount, photosCount) {
  const summary = {
    importDate: new Date().toISOString(),
    firestoreCollections: {
      albums: albumsCount,
      dayEntries: dayEntriesCount,
      photos: photosCount
    },
    nextSteps: [
      "1. D√©ployer les r√®gles Firestore: firebase deploy --only firestore:rules",
      "2. D√©ployer les r√®gles Storage: firebase deploy --only storage", 
      "3. Migrer les fichiers du storage Supabase vers Firebase Storage",
      "4. Configurer Firebase Auth dans votre application",
      "5. Remplacer les appels Supabase par Firebase dans le code",
      "6. Tester l'application avec Firebase",
      "7. Supprimer les donn√©es Supabase apr√®s validation"
    ],
    storageInfo: {
      message: "Les fichiers doivent √™tre migr√©s manuellement du storage Supabase vers Firebase Storage",
      structure: "Organisez les fichiers par userId: /photos/{userId}/ et /thumbnails/{userId}/"
    }
  };

  const filePath = path.join(exportDir, 'firebase-import-summary.json');
  await fs.writeFile(filePath, JSON.stringify(summary, null, 2));
  
  return summary;
}

async function main() {
  try {
    console.log('üöÄ D√©but de l\'import vers Firebase...\n');
    
    const exportDir = path.join(__dirname, 'supabase-export');
    
    // V√©rifier que les fichiers d'export existent
    const albumsPath = path.join(exportDir, 'albums.json');
    const dayEntriesPath = path.join(exportDir, 'day_entries.json');
    const photosPath = path.join(exportDir, 'photos.json');
    
    console.log('üìÇ Lecture des donn√©es export√©es...');
    const albums = JSON.parse(await fs.readFile(albumsPath, 'utf8'));
    const dayEntries = JSON.parse(await fs.readFile(dayEntriesPath, 'utf8'));
    const photos = JSON.parse(await fs.readFile(photosPath, 'utf8'));
    
    console.log(`üìä Donn√©es √† importer:`);
    console.log(`   Albums: ${albums.length}`);
    console.log(`   Day Entries: ${dayEntries.length}`);
    console.log(`   Photos: ${photos.length}\n`);
    
    // Import des collections
    const albumsCount = await importCollection('albums', albums);
    const dayEntriesCount = await importCollection('dayEntries', dayEntries);
    const photosCount = await importCollection('photos', photos);
    
    // G√©n√©rer les r√®gles de s√©curit√©
    await createFirestoreRules();
    await createStorageRules();
    
    // G√©n√©rer le r√©sum√©
    await generateMigrationSummary(exportDir, albumsCount, dayEntriesCount, photosCount);
    
    console.log('\nüéâ Import termin√© avec succ√®s!');
    console.log('\nüìã √âTAPES SUIVANTES:');
    console.log('1. D√©ployez les r√®gles: firebase deploy --only firestore:rules storage');
    console.log('2. Migrez manuellement les fichiers du storage');
    console.log('3. Mettez √† jour le code de votre application');
    
    console.log('\nüìÑ Fichiers g√©n√©r√©s:');
    console.log('- firestore.rules (r√®gles de s√©curit√© Firestore)');
    console.log('- storage.rules (r√®gles de s√©curit√© Storage)');
    console.log('- supabase-export/firebase-import-summary.json');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors de l\'import:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  main();
}

module.exports = { main };